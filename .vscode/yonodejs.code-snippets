{
  "TAG LOG RED": {
    "prefix": "tag_log_red",
    "body": [
      "📕📕📕"
    ],
    "description": "TAG LOG RED"
  },
  "TAG LOG YELLOW": {
    "prefix": "tag_log_yellow",
    "body": [
      "📔📔📔"
    ],
    "description": "TAG LOG YELLOW"
  },
  "TAG LOG GREEN": {
    "prefix": "tag_log_green",
    "body": [
      "📗📗📗"
    ],
    "description": "TAG LOG GREEN"
  },
  "seeder delete": {
    "prefix": "seeder-delete",
    "body": [
      "return await queryInterface.bulkDelete('$model_names', null, {});"
    ],
    "description": "model delete"
  },
  "seeder create": {
    "prefix": "seeder-create",
    "body": [
      "return await queryInterface.bulkInsert('$model_names', [",
      " {",
      "   $column: '$data',",
      "   created_at: new Date(),",
      "   updated_at: new Date()",
      " },",
      " {",
      "   created_at: new Date(),",
      "   updated_at: new Date()",
      " },",
      "]);"
    ],
    "description": "seeder create"
  },
  "migration create at": {
    "prefix": "migration-create-at",
    "body": [
      "created_at"
    ],
    "description": "migration create at"
  },
  "migration updated at": {
    "prefix": "migration-updated-at",
    "body": [
      "updated_at"
    ],
    "description": "migration updated at"
  },
  "migration deleted at": {
    "prefix": "migration-deleted-at",
    "body": [
      "deleted_at: {",
      "  type: Sequelize.DATE",
      "}"
    ],
    "description": "migration deleted at"
  },
  "model legacy": {
    "prefix": "model-legacy",
    "body": [
      "paranoid: true,",
      "underscored: true,"
    ],
    "description": "model legacy"
  },
  "include model": {
    "prefix": "include-model",
    "body": [
      "include: [",
      "  {",
      "    model :${1:model_name},",
      "    $// attributes:[ '${1:field_1}', '${1:field_2}' ] // custom field",
      "  },",
      "],"
    ],
    "description": "include model"
  },
  "migration double column": {
    "prefix": "migration-double-column",
    "body": [
      "${1:column_name}: {",
      "  type: Sequelize.DOUBLE",
      "},"
    ],
    "description": "migration double column"
  },
  "migration string column": {
    "prefix": "migration-string-column",
    "body": [
      "$column_name: {",
      "  type: Sequelize.STRING",
      "},"
    ],
    "description": "migration string column"
  },
  "migration boolean column": {
    "prefix": "migration-boolean-column",
    "body": [
      "${1:column_name}: {",
      "  type: Sequelize.BOOLEAN",
      "},"
    ],
    "description": "migration boolean column"
  },
  "migration text column": {
    "prefix": "migration-text-column",
    "body": [
      "$column_name: {",
      "  type: Sequelize.TEXT",
      "},"
    ],
    "description": "migration text column"
  },
  "migration integer column": {
    "prefix": "migration-integer-column",
    "body": [
      "$column_name: {",
      "  type: Sequelize.INTEGER",
      "},"
    ],
    "description": "migration integer column"
  },
  "migration foreign column": {
    "prefix": "migration-foreignkey-column",
    "body": [
      "${1:column}$_id: {",
      " type: Sequelize.INTEGER,",
      " allowNull: false,",
      " references: {",
      "   model: \"${1:column}s\",",
      "   key: \"id\"",
      " },",
      " onDelete: \"CASCADE\"",
      "},"
    ],
    "description": "migration foreign column"
  },
  "model init string column": {
    "prefix": "model-string-column",
    "body": [
      "$column_name: DataTypes.STRING,"
    ],
    "description": "model init string column"
  },
  "model init integer column": {
    "prefix": "model-integer-column",
    "body": [
      "$column_name: DataTypes.INTEGER,"
    ],
    "description": "model init integer column"
  },
  "model init text column": {
    "prefix": "model-text-column",
    "body": [
      "$column_name: DataTypes.TEXT,"
    ],
    "description": "model init text column"
  },
  "controller init": {
    "prefix": "controller-init-handler",
    "body": [
      "var pagination = require(\"../utils/pagination\");",
      "var response = require(\"../utils/res\");",
      "const { ",
      "     Sequelize, ${1:model1}, $model2",
      " } = require(\"../db/models\");",
      "const Op = Sequelize.Op;",
      "",
      "var moment = require('moment-timezone');",
      "moment().locale(\"id\");",
      "moment().tz(\"Asia/Makassar\").format();",
      "",
      "exports.${1:model1}_show = async (req, res) => {",
      "  await ${1:model1}.",
      "  // res.status(200).send(\"Content.\");",
      "};"
    ],
    "description": "controller init"
  },
  "controller-show-data": {
    "prefix": "controller-show-data",
    "body": [
      "exports.${1:model}_show = async (req, res) => {",
      "  const id = req.params.id;",
      "  if (id) {",
      "    await ${1:model}.findOne({",
      "      where: {",
      "        $column_id: id",
      "      },",
      "      // attributes: { // override show data",
      "      //  exclude: ['full_name']",
      "      //},",
      "      // attributes: ['full_name'], // override show data",
      "       order: [",
      "         ['id', 'DESC'],",
      "       ],",
      "       // paranoid: false, // This will also retrieve soft-deleted records",
      "    }).then((${1:model}s) => {",
      "      const resData = {",
      "        ${1:model}s: ${1:model}s,",
      "      };",
      "      response.ok(res, \"load ${1:model} data\", resData);",
      "    }).catch((err) => {",
      "      console.log('${1:model}_show findOne error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  } else {",
      "    const { page, size, sort, title } = req.query;",
      "    // var condition =  { name: 'captain' };",
      "    const { limit, offset } = pagination.getPagination(page, size);",
      "",
      "    var sortInit = sort;",
      "    if (!sortInit)",
      "       sortInit = 'ASC';",
      "",
      "    await ${1:model}.findAndCountAll({",
      "       // include: user,",
      "       // where: condition,",
      "       limit, offset,",
      "       // paranoid: false, // This will also retrieve soft-deleted records",
      "       order: [",
      "          ['id', `\\${sortInit}`],",
      "       ],",
      "",
      "    })",
      "    .then( async (${1:model}s) => {",
      "      const resData = pagination.getPagingData(${1:model}s, page, limit, '${1:model}s');",
      "      response.ok(res, \"load ${1:model}s data\", resData);",
      "    }).catch((err) => {",
      "      console.log('${1:model}_show findAll error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  }",
      "};"
    ],
    "description": "controller-show-data"
  },
  "controller create data": {
    "prefix": "controller-create-data",
    "body": [
      "exports.${1:model}_create = async (req, res) => {",
      "  await ${1:model}.create({",
      "    // user_id: req.body.user_id,",
      "  }).then((${1:model}) => {",
      "    const resData = {",
      "       results: [${1:model}],",
      "    }; ",
      "    response.ok(res, \"${1:model} created\", resData);",
      "  }).catch((err) => {",
      "    console.log('${1:model}, tidak berhasil menambahkan data : ', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}"
    ],
    "description": "controller-create-data"
  },
  "controller-json-body": {
    "prefix": "controller-json-body",
    "body": [
      "${1:json}: req.body.${1:json},"
    ],
    "description": "controller-json-body"
  },
  "controller update data": {
    "prefix": "controller-update-data",
    "body": [
      "exports.${1:model}_update = async (req, res) => {",
      "  const id = req.params.id;",
      "  await ${1:model}.update({",
      "    score: req.body.score",
      "  }, {",
      "    where: {",
      "      id: id",
      "    }",
      "  }).then((${1:model}) => {",
      "    response.ok(res, \"${1:model} updated\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model}, tidak berhasil mengubah data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}"
    ],
    "description": "controller-update-data"
  },
  "controller delete data": {
    "prefix": "controller-delete-data",
    "body": [
      "exports.${1:model}_delete = async (req, res) => {",
      "  const id = req.params.id; // {id}/{flag}",
      "  const flag = req.params.flag; // {id}/{flag}",
      "  ",
      "  if (flag == 2) {",
      "     await ${1:model}.restore();",
      "     var msg = \"${1:model} restore deleted\";",
      "     return response.ok(res, msg, 1);",
      "  }",
      "  ",
      "  await ${1:model}.destroy({",
      "    where: {",
      "      id: id",
      "    },",
      "    force: flag == 1 ? true : false, // hard delete true|1",
      "  }).then((${1:model}) => {",
      "    var msg = flag == 0 ? \"${1:model}, berhasil menghapus data\" : \"${1:model}, berhasil menghapus data secara permanen\";",
      "    response.ok(res, msg, 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model}, tidak berhasil menghapus data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}"
    ],
    "description": "controller delete data"
  },
  "routes init": {
    "prefix": "routes-init",
    "body": [
      "const { authJwt } = require(\"../middleware\");",
      "const controller = require(\"../controllers/${1:controller_name}.controller\");",
      "// we have re structure folder, please check controller location",
      "// TODO global @path",
      "",
      "module.exports = function (app) {",
      "  app.use(function (req, res, next) {",
      "    res.header(",
      "      \"Access-Control-Allow-Headers\",",
      "      \"x-access-token, Origin, Content-Type, Accept\"",
      "    );",
      "    next();",
      "  });",
      "  // codehere",
      "  $routes",
      "};",
      ""
    ],
    "description": "routes-init"
  },
  "routes-crud": {
    "prefix": "routes-crud",
    "body": [
      "// findAll",
      "app.get(\"/api/${1:model_name}\",",
      "  [authJwt.verifyToken],",
      "  controller.${1:model_name}_show",
      ");",
      "",
      "// findOne",
      "app.get(\"/api/${1:model_name}/:id\",",
      "  [authJwt.verifyToken],",
      "  controller.${1:model_name}_show",
      ");",
      "",
      "// create",
      "app.post(\"/api/${1:model_name}\",",
      "  [authJwt.verifyToken],",
      "  controller.${1:model_name}_create",
      ");",
      "",
      "// update",
      "app.put(\"/api/${1:model_name}/:id\",",
      "  [authJwt.verifyToken],",
      "  controller.${1:model_name}_update",
      ");",
      "",
      "// delete",
      "app.delete(\"/api/${1:model_name}/:id/:flag\",",
      "  [authJwt.verifyToken],",
      "  controller.${1:model_name}_delete",
      ");"
    ],
    "description": "routes-crud"
  },

  "model belongsTo { ex: score to user }": {
    "prefix": "model-belongsTo",
    "body": [
      "models.${1:score}.belongsTo(models.${2:user}, {",
      " foreignKey: \"${2:user}_id\",",
      " constraint: false",
      "});"
    ],
    "description": "model belongsTo { ex: score to user }"
  },
  "model hasMany { ex: user to score }": {
    "prefix": "model-hasMany",
    "body": [
      "models.${1:user}.hasMany(models.${2:score}, {",
      " foreignKey: \"${2:score}_id\",",
      " constraint: false",
      "});"
    ],
    "description": "model hasMany { ex: user to score }"
  },
  "model belongsToMany { ex: user and role }": {
    "prefix": "model belongsToMany",
    "body": [
      "models.${1:role}.belongsToMany(models.${2:user}, {",
      "  through: models.${2:user}_${1:role},",
      "  // foreignKey: \"${1:role}_id\",",
      "  // otherKey: \"${2:user}_id\",",
      "});",
      "models.${2:user}.belongsToMany(models.${1:role}, {",
      "  through: models.${2:user}_${1:role},",
      "  // foreignKey: \"${2:user}_id\",",
      "  // otherKey: \"${1:role}_id\",",
      "});"
    ],
    "description": "model hasMany { ex: user to score }"
  },
  "migration legacy": {
    "prefix": "migration-legacy",
    "body": [
      "created_at: {",
      "  allowNull: false,",
      "  type: Sequelize.DATE",
      "},",
      "updated_at: {",
      "  allowNull: false,",
      "  type: Sequelize.DATE",
      "},",
      "deleted_at: {",
      "  type: Sequelize.DATE",
      "}"
    ],
    "description": "migration legacy"
  },
  "migration add index ( candidate keys )": {
    "prefix": "migration-add-index",
    "body": [
      "await queryInterface.addIndex(",
      "  '${1:table_names}',",
      "  [",
      "    // '${2:field}',",
      "    //'periode',",
      "    'created_at',",
      "    'updated_at',",
      "    'deleted_at',",
      "  ],",
      "  {",
      "    name: '${2:indexcandidate}',",
      "    unique: false,",
      "    // where: {",
      "    //   column3: {",
      "    //     [Sequelize.Op.ne]: null",
      "    //   }",
      "    // }",
      "  }",
      ");"
    ],
    "description": "migration add index ( candidate keys )"
  },
  "controller crud all normal": {
    "prefix": "controller-crud-all-normal",
    "body": [
      "var pagination = require(\"../utils/pagination\");",
      "var response = require(\"../utils/res\");",
      "",
      "const {",
      "    Sequelize,",
      "    ${1:model_name},",
      " } = require(\"../db/models\");",
      "",
      "const Op = Sequelize.Op;",
      "",
      "//const {",
      "//  ウセrウォイsメ",
      "//} = require(\"../controllers/user.controller\");",
      "",
      "var moment = require('moment-timezone');",
      "moment().locale(\"id\");",
      "moment().tz(\"Asia/Makassar\").format();",
      "",
      "exports.${1:model_name}_create = async (req, res) => {",
      "  //const my_id = await ウセrウォイsメ(req, res);",
      "  await ${1:model_name}.create({",
      "    //full_name: req.body.full_name,",
      "  }).then((${1:model_name}) => {",
      "    response.ok(res, \"${1:model_name} created\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil menambahkan data : ', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}",
      "",
      "exports.${1:model_name}_show = async (req, res) => {",
      "  const id = req.params.id;",
      "",
      "  if (id) {",
      "    await ${1:model_name}.findOne({",
      "      where: {",
      "        id: id",
      "      },",
      "       // paranoid: false, // This will also retrieve soft-deleted records",
      "    }).then((${1:model_name}s) => {",
      "      const resData = {",
      "        ${1:model_name}s: ${1:model_name}s,",
      "      };",
      "      response.ok(res, \"load ${1:model_name} data\", resData);",
      "    }).catch((err) => {",
      "      console.log('${1:model_name}_show findOne error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  } else {",
      "    const { page, size, sort , full_name} = req.query;",
      "    var condition =  {",
      "      full_name: {",
      "        [Op.like]: Sequelize.literal(`\\'%${full_name}%\\'`)",
      "      },",
      "    };",
      "    const { limit, offset } = pagination.getPagination(page, size);",
      "",
      "    var sortInit = sort;",
      "    if (!sortInit)",
      "       sortInit = 'ASC';",
      "",
      "    await ${1:model_name}.findAndCountAll({",
      "      //where: full_name ? condition : null,",
      "      limit, offset,",
      "      //paranoid: false, // This will also retrieve soft-deleted records",
      "      order: [",
      "          ['id', `\\${sortInit}`],",
      "      ],",
      "    })",
      "    .then( async (${1:model_name}s) => {",
      "      var resData = pagination.getPagingData(${1:model_name}s, page, limit, '${1:model_name}s');",
      "      response.ok(res, \"load ${1:model_name}s data\", resData);",
      "    }).catch((err) => {",
      "      console.log('${1:model_name}_show findAll error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  }",
      "};",
      "",
      "exports.${1:model_name}_update = async (req, res) => {",
      "  const id = req.params.id;",
      "  await ${1:model_name}.update({",
      "    //full_name: req.body.full_name,",
      "  }, {",
      "    where: {",
      "      id: id",
      "    }",
      "  }).then((${1:model_name}) => {",
      "    response.ok(res, \"${1:model_name} updated\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil mengubah data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}",
      "",
      "exports.${1:model_name}_delete = async (req, res) => {",
      "  const id = req.params.id; // {id}/{flag}",
      "  const flag = req.params.flag; // {id}/{flag}",
      "",
      "  if (flag == 2) {",
      "    await ${1:model_name}.restore();",
      "    var msg = \"${1:model_name} restore deleted\";",
      "    return response.ok(res, msg, 1);",
      "  }",
      "",
      "  await ${1:model_name}.destroy({",
      "    where: {",
      "      id: id",
      "    },",
      "    force: flag == 1 ? true : false, // hard delete true|1",
      "  }).then((${1:model_name}) => {",
      "    var msg = flag == 0 ? \"${1:model_name}, berhasil menghapus data\" : \"${1:model_name}, berhasil menghapus data secara permanen\";",
      "    response.ok(res, msg, 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil menghapus data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}"
    ],
    "description": "controller crud all normal"
  },
  "controller おでん custom": {
    "prefix": "controller-おでん",
    "body": [
      "var pagination = require(\"../../utils/pagination\");",
      "var response = require(\"../../utils/res\");",
      "",
      "const {",
      "    Sequelize,",
      "    おでん＿たbLED, department, おでん_program,",
      "    user, おでん_profile, ${1:model_name},",
      " } = require(\"../../db/models\");",
      "const {",
      "     data_master",
      " } = require(\"./data_master.controller\");",
      "",
      "const Op = Sequelize.Op;",
      "",
      "const {",
      "  ウセrウォイsメ,",
      "} = require(\"../user.controller\");",
      "",
      "var moment = require('moment-timezone');",
      "moment().locale(\"id\");",
      "moment().tz(\"Asia/Makassar\").format();",
      "",
      "exports.${1:model_name}_create = async (req, res) => {",
      "  const my_id = await ウセrウォイsメ(req, res);",
      "  await ${1:model_name}.create({",
      "    おでん＿たbLED_id: req.body.おでん＿たbLED_id,",
      "    user_id: my_id,",
      "  }).then((${1:model_name}) => {",
      "    response.ok(res, \"${1:model_name} created\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil menambahkan data : ', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}",
      "",
      "exports.${1:model_name}_show = async (req, res) => {",
      "  const id = req.params.id;",
      "    const { page, size, sort, ts, program_studi, short_name, name, おでん＿たbLED_id } = req.query;",
      "  // --- data master #TODO REDIS",
      "  const dataMaster = {",
      "    dataMaster: await data_master(おでん＿たbLED_id),",
      "  };",
      "  // --- end of data master #TODO REDIS",
      "  if (id) {",
      "    await ${1:model_name}.findOne({",
      "      include: [",
      "        {",
      "          model: おでん＿たbLED,",
      "          attributes: ['id', 'ts'],",
      "        },",
      "        {",
      "          model: user,",
      "          attributes: ['id', 'full_name', 'phone', 'email'],",
      "          include: [",
      "            {",
      "              model: おでん_profile,",
      "              attributes: [",
      "                'id', 'email', 'no_telp',",
      "                'ts', 'website'",
      "              ],",
      "            },",
      "            {",
      "              model: department,",
      "              attributes: ['id', 'program_studi', 'おでん_program_id'],",
      "              through: {attributes: []},",
      "              include: [",
      "                {",
      "                  model: おでん_program,",
      "                  attributes: ['id', 'jenis_program', 'short_name'],",
      "                  required: false,",
      "                }",
      "              ]",
      "            }",
      "          ]",
      "        }",
      "      ],",
      "      where: {",
      "        id: id",
      "      },",
      "       // paranoid: false, // This will also retrieve soft-deleted records",
      "    }).then((${1:model_name}s) => {",
      "      const resData = {",
      "        ${1:model_name}s: ${1:model_name}s,",
      "      };",
      "      response.ok(res, \"load ${1:model_name} data\", resData, dataMaster);",
      "    }).catch((err) => {",
      "      console.log('${1:model_name}_show findOne error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  } else {",
      "    //var condition =  {",
      "    // name_ps: {",
      "    //   [Op.like]: Sequelize.literal(`\\'%${name}%\\'`)",
      "    // },",
      "    //};",
      "    const { limit, offset } = pagination.getPagination(page, size);",
      "",
      "    var sortInit = sort;",
      "    if (!sortInit)",
      "       sortInit = 'ASC';",
      "",
      "    await ${1:model_name}.findAndCountAll({",
      "      include: [",
      "        {",
      "          model: おでん＿たbLED,",
      "          attributes: ['id', 'ts'],",
      "          where: {",
      "            ts: `\\${ts}`",
      "          }",
      "        },",
      "        {",
      "          model: user,",
      "          attributes: ['id', 'full_name', 'phone', 'email'],",
      "          include: [",
      "            {",
      "              model: おでん_profile,",
      "              attributes: [",
      "                'id', 'email', 'no_telp',",
      "                'ts', 'website'",
      "              ],",
      "              where: {",
      "                ts: `\\${ts}`",
      "              }",
      "            },",
      "            {",
      "              model: department,",
      "              attributes: ['id', 'program_studi', 'おでん_program_id'],",
      "              through: {attributes: []},",
      "              where: program_studi ? { program_studi: `\\${program_studi}` } : null,",
      "              include: [",
      "                {",
      "                  model: おでん_program,",
      "                  attributes: ['id', 'jenis_program', 'short_name'],",
      "                  where: short_name ? { short_name: `\\${short_name}` } : null,",
      "                  required: false,",
      "                }",
      "              ]",
      "            }",
      "          ]",
      "        }",
      "      ],",
      "      //where: name ? condition : null,",
      "      limit, offset,",
      "      //paranoid: false, // This will also retrieve soft-deleted records",
      "      order: [",
      "          ['id', `\\${sortInit}`],",
      "      ],",
      "    })",
      "    .then( async (${1:model_name}s) => {",
      "      var data = [];",
      "      if (${1:model_name}s.rows[0]) {",
      "        ${1:model_name}s.rows.forEach(element => { // filtering by short_name",
      "          if (element.user.departments[0].おでん_program != null) {",
      "            data.push(element);",
      "          }",
      "        });",
      "      }",
      "      ${1:model_name}s.rows = data;",
      "      var resData = pagination.getPagingData(${1:model_name}s, page, limit, '${1:model_name}s');",
      "      response.ok(res, \"load ${1:model_name}s data\", resData, dataMaster);",
      "    }).catch((err) => {",
      "      console.log('${1:model_name}_show findAll error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  }",
      "};",
      "",
      "exports.${1:model_name}_update = async (req, res) => {",
      "  const id = req.params.id;",
      "  const my_id = await ウセrウォイsメ(req, res);",
      "  await ${1:model_name}.update({",
      "    おでん＿たbLED_id: req.body.おでん＿たbLED_id,",
      "    user_id: my_id,",
      "  }, {",
      "    where: {",
      "      id: id",
      "    }",
      "  }).then((${1:model_name}) => {",
      "    response.ok(res, \"${1:model_name} updated\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil mengubah data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}",
      "",
      "exports.${1:model_name}_delete = async (req, res) => {",
      "  const id = req.params.id; // {id}/{flag}",
      "  const flag = req.params.flag; // {id}/{flag}",
      "",
      "  if (flag == 2) {",
      "    await ${1:model_name}.restore();",
      "    var msg = \"${1:model_name} restore deleted\";",
      "    return response.ok(res, msg, 1);",
      "  }",
      "",
      "  await ${1:model_name}.destroy({",
      "    where: {",
      "      id: id",
      "    },",
      "    force: flag == 1 ? true : false, // hard delete true|1",
      "  }).then((${1:model_name}) => {",
      "    var msg = flag == 0 ? \"${1:model_name}, berhasil menghapus data\" : \"${1:model_name}, berhasil menghapus data secara permanen\";",
      "    response.ok(res, msg, 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil menghapus data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}"
    ],
    "description": "controller おでん custom"
  },
  "おでん Controller with ドセン": {
    "prefix": "controller-何-ドセン",
    "body": [
      "var pagination = require(\"../../utils/pagination\");",
      "var response = require(\"../../utils/res\");",
      "var moment = require(\"moment\");",
      "const {",
      "    Sequelize,",
      "    おでん＿たbLED, department, おでん_program,",
      "    user, おでん_profile, ${1:model_name},",
      "    data_master_ドセン",
      " } = require(\"../../db/models\");",
      "const {",
      "     data_master",
      " } = require(\"./data_master.controller\");",
      "",
      "const Op = Sequelize.Op;",
      "",
      "const {",
      "  ウセrウォイsメ,",
      "} = require(\"../user.controller\");",
      "",
      "var moment = require('moment-timezone');",
      "moment().locale(\"id\");",
      "moment().tz(\"Asia/Makassar\").format();",
      "",
      "exports.${1:model_name}_create = async (req, res) => {",
      "  const my_id = await ウセrウォイsメ(req, res);",
      "  await ${1:model_name}.create({",
      "    おでん＿たbLED_id: req.body.おでん＿たbLED_id,",
      "    user_id: my_id,",
      "    data_master_ドセン_id: req.body.data_master_ドセン_id,",
      "  }).then((${1:model_name}) => {",
      "    response.ok(res, \"${1:model_name} created\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil menambahkan data : ', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}",
      "",
      "exports.${1:model_name}_show = async (req, res) => {",
      "  const id = req.params.id;",
      "    const { page, size, sort, ts, program_studi, short_name, name, おでん＿たbLED_id } = req.query;",
      "  // --- data master #TODO REDIS",
      "  const dataMaster = {",
      "    dataMaster: await data_master(おでん＿たbLED_id),",
      "  };",
      "  // --- end of data master #TODO REDIS",
      "  if (id) {",
      "    await ${1:model_name}.findOne({",
      "      include: [",
      "        {",
      "          model: data_master_ドセン",
      "        },",
      "        {",
      "          model: おでん＿たbLED,",
      "          attributes: ['id', 'ts'],",
      "        },",
      "        {",
      "          model: user,",
      "          attributes: ['id', 'full_name', 'phone', 'email'],",
      "          include: [",
      "            {",
      "              model: おでん_profile,",
      "              attributes: [",
      "                'id', 'email', 'no_telp',",
      "                'ts', 'website'",
      "              ],",
      "            },",
      "            {",
      "              model: department,",
      "              attributes: ['id', 'program_studi', 'おでん_program_id'],",
      "              through: {attributes: []},",
      "              include: [",
      "                {",
      "                  model: おでん_program,",
      "                  attributes: ['id', 'jenis_program', 'short_name'],",
      "                  required: false,",
      "                }",
      "              ]",
      "            }",
      "          ]",
      "        }",
      "      ],",
      "      where: {",
      "        id: id",
      "      },",
      "       // paranoid: false, // This will also retrieve soft-deleted records",
      "    }).then((${1:model_name}s) => {",
      "      const resData = {",
      "        ${1:model_name}s: ${1:model_name}s.map(data => ({...data, waktu_kegiatan: moment(data.waktu_kegiatan).format('DD-MM-YYYY')})),",
      "      };",
      "      response.ok(res, \"load ${1:model_name} data\", resData, dataMaster);",
      "    }).catch((err) => {",
      "      console.log('${1:model_name}_show findOne error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  } else {",
      "    //var condition =  {",
      "    // name_ps: {",
      "    //   [Op.like]: Sequelize.literal(`\\'%name%\\'`)",
      "    // },",
      "    //};",
      "    const { limit, offset } = pagination.getPagination(page, size);",
      "",
      "    var sortInit = sort;",
      "    if (!sortInit)",
      "       sortInit = 'ASC';",
      "",
      "    await ${1:model_name}.findAndCountAll({",
      "      include: [",
      "        {",
      "          model: data_master_ドセン",
      "        },",
      "        {",
      "          model: おでん＿たbLED,",
      "          attributes: ['id', 'ts'],",
      "          where: {",
      "            ts: `${ts}`",
      "          }",
      "        },",
      "        {",
      "          model: user,",
      "          attributes: ['id', 'full_name', 'phone', 'email'],",
      "          include: [",
      "            {",
      "              model: おでん_profile,",
      "              attributes: [",
      "                'id', 'email', 'no_telp',",
      "                'ts', 'website'",
      "              ],",
      "              where: {",
      "                ts: `${ts}`",
      "              }",
      "            },",
      "            {",
      "              model: department,",
      "              attributes: ['id', 'program_studi', 'おでん_program_id'],",
      "              through: {attributes: []},",
      "              where: program_studi ? { program_studi: `${program_studi}` } : null,",
      "              include: [",
      "                {",
      "                  model: おでん_program,",
      "                  attributes: ['id', 'jenis_program', 'short_name'],",
      "                  where: short_name ? { short_name: `${short_name}` } : null,",
      "                  required: false,",
      "                }",
      "              ]",
      "            }",
      "          ]",
      "        }",
      "      ],",
      "      //where: name ? condition : null,",
      "      limit, offset,",
      "      //paranoid: false, // This will also retrieve soft-deleted records",
      "      order: [",
      "          ['id', `${sortInit}`],",
      "      ],",
      "    })",
      "    .then( async (${1:model_name}s) => {",
      "      var data = [];",
      "      if (${1:model_name}s.rows[0]) {",
      "        ${1:model_name}s.rows.forEach(element => { // filtering by short_name",
      "          if (element.user.departments[0].おでん_program != null) {",
      "            data.push(element);",
      "          }",
      "        });",
      "      }",
      "      var resData = pagination.getPagingData(${1:model_name}s, page, limit, '${1:model_name}s');",
      "      response.ok(res, \"load ${1:model_name}s data\", resData, dataMaster);",
      "    }).catch((err) => {",
      "      console.log('${1:model_name}_show findAll error : ', err);",
      "      response.err(res, err.message, 500);",
      "    });",
      "  }",
      "};",
      "",
      "exports.${1:model_name}_update = async (req, res) => {",
      "  const id = req.params.id;",
      "  const my_id = await ウセrウォイsメ(req, res);",
      "  await ${1:model_name}.update({",
      "    おでん＿たbLED_id: req.body.おでん＿たbLED_id,",
      "    user_id: my_id,",
      "    data_master_ドセン_id: req.body.data_master_ドセン_id,",
      "  }, {",
      "    where: {",
      "      id: id",
      "    }",
      "  }).then((${1:model_name}) => {",
      "    response.ok(res, \"${1:model_name} updated\", 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil mengubah data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}",
      "",
      "exports.${1:model_name}_delete = async (req, res) => {",
      "  const id = req.params.id; // {id}/{flag}",
      "  const flag = req.params.flag; // {id}/{flag}",
      "",
      "  if (flag == 2) {",
      "    await ${1:model_name}.restore();",
      "    var msg = \"${1:model_name} restore deleted\";",
      "    return response.ok(res, msg, 1);",
      "  }",
      "",
      "  await ${1:model_name}.destroy({",
      "    where: {",
      "      id: id",
      "    },",
      "    force: flag == 1 ? true : false, // hard delete true|1",
      "  }).then((${1:model_name}) => {",
      "    var msg = flag == 0 ? \"${1:model_name}, berhasil menghapus data\" : \"${1:model_name}, berhasil menghapus data secara permanen\";",
      "    response.ok(res, msg, 1);",
      "  }).catch((err) => {",
      "    console.log('${1:model_name}, tidak berhasil menghapus data', err);",
      "    response.err(res, err.message, 500);",
      "  });",
      "}"
    ],
    "description": "おでん Controller with ドセン"
  },
  "controller create or update single recommendation [UPSERT]": {
    "prefix": "controller-upsert",
    "body": [
      "exports.${1:model_name}_create = async (req, res) => {",
      "  const {",
      "    user_id,",
      "    alamat,",
      "   } = req.body;",
      "",
      "    await おでん_profile.upsert(",
      "      {",
      "        id: user_id, // You do still need to provide the id of the record you want to upsert or a new record will be created.",
      "        user_id: user_id,",
      "        alamat: alamat,",
      "      }, // Record to upsert",
      "      { returning: true }     // Return upserted record",
      "    )",
      "    .then( async ([result, created]) => {",
      "      const msg = created ? 'created' : 'updated';",
      "      return response.ok(res, `user $${msg} ${1:model_name}`, 1);",
      "    }).catch((err) => {",
      "      return response.err(res, err.message, 500);",
      "    });",
      "}"
    ],
    "description": "controller create or update single recommendation [UPSERT]"
  },
  "sequalize result stringify": {
    "prefix": "controller-result",
    "body": [
      "const res = JSON.stringify(${1:result});"
    ],
    "description": "sequalize result stringify"
  },
  "model for おでん relationship": {
    "prefix": "model-おでん",
    "body": [
      "models.${1:main_model}.belongsTo(models.おでん＿たbLED, {",
      "  foreignKey: 'おでん＿たbLED_id',",
      "  constraints: false,",
      "});",
      "models.${1:main_model}.belongsTo(models.user, {",
      "  foreignKey: 'user_id',",
      "  constraint: false,",
      "});"
    ],
    "description": "model for おでん relationship"
  },
  "model relation おでん": {
    "prefix": "model-relation-おでん",
    "body": [
      "models.${1:model_name}.belongsTo(models.おでん＿たbLED, {",
      "  foreignKey: 'おでん＿たbLED_id',",
      "  constraints: false,",
      "});",
      "models.${1:model_name}.belongsTo(models.user, {",
      "  foreignKey: 'user_id',",
      "  constraint: false,",
      "});",
      "models.${1:model_name}.belongsTo(models.data_master_ドセン, {",
      "  foreignKey: 'data_master_ドセン_id',",
      "  constraint: false,",
      "});"
    ],
    "description": "model relation おでん"
  },
  "model attr おでん": {
    "prefix": "model-attr-おでん",
    "body": [
      "おでん＿たbLED_id: DataTypes.INTEGER,",
      "user_id: DataTypes.INTEGER,",
    ],
    "description": "model attr おでん"
  },
  "model attr おでん ドセン": {
    "prefix": "model-attr-おでん-ドセン",
    "body": [
      "おでん＿たbLED_id: DataTypes.INTEGER,",
      "user_id: DataTypes.INTEGER,",
      "data_master_ドセン_id: DataTypes.INTEGER,",
    ],
    "description": "model attr おでん ドセン"
  },
  "おでん export require": {
    "prefix": "controller-おでん-export-require",
    "body": [
      "// update link file",
      "const {",
      "  おでん＿たbLED_file_excel_update,",
      "  おでん＿たbLED_auto_update",
      "} = require(\"./おでん＿たbLED.controller\");",
      "",
      "// generate per criteria",
      "const {",
      "  ${1:model_name}_export",
      "} = require(\"../export/${1:model_name}_export.controller\");"
    ],
    "description": "controller おでん export require"
  },
  "おでん-export-function": {
    "prefix": "controller-おでん-export-define",
    "body": [
      "exports.${1:model}_submit_show = async (req, res) => {",
      "  const generateAndGetFileName = await ${1:model}_export(req, res);",
      "  if (generateAndGetFileName) { // generate excel file success",
      "    req.params.id = req.query.おでん＿たbLED_id; // override update :id for おでん table",
      "    req.body.link_file_excel = generateAndGetFileName; // override raw body for おでん table",
      "    const storeLinkFile = await おでん＿たbLED_file_excel_update(req, res) // store link file",
      "    if (storeLinkFile) {",
      "      req.body.status = \"セcレt\";",
      "      const changeStatus = await おでん＿たbLED_auto_update(req, res);",
      "      if (changeStatus) {",
      "        response.ok(res, `セcレtマインッオデ`, 1);",
      "      } else {",
      "        response.err(err, 'セcレtオテェッ', 500);",
      "      }",
      "    } else {",
      "      response.err(err, 'エッロッフィェ', 500);",
      "    }",
      "  } else {",
      "    response.err(err, 'エッロッrンセンヂンッフィェ', 500);",
      "  }",
      "};"
    ],
    "description": "controller-おでん-export-define"
  },
  "routes-おでん-export": {
    "prefix": "routes-おでん-export",
    "body": [
      "// submit",
      "app.get(\"/api/${1:model}/submit/excel\",",
      "  [authJwt.verifyToken],",
      "  controller.${1:model}_submit_show",
      ");"
    ],
    "description": "routes-おでん-export"
  },
  "migration enum": {
    "prefix": "migration-enum",
    "body": [
      "state_セcレt: {",
      "  type: Sequelize.ENUM(",
      "      '$2.2.2-1', // name_sheet",
      "    )",
      "},"
    ],
    "description": "migration enum"
  },
  "migration foreign おでん": {
    "prefix": "migration-foregin-おでん",
    "body": [
      "おでん＿たbLED_id: {",
      "  type: Sequelize.INTEGER,",
      "  allowNull: false,",
      "  references: {",
      "    model: \"おでん＿たbLEDs\",",
      "    key: \"id\"",
      "  },",
      "  onDelete: \"CASCADE\"",
      "},",
      "user_id: {",
      "  type: Sequelize.INTEGER,",
      "  allowNull: false,",
      "  references: {",
      "    model: \"users\",",
      "    key: \"id\"",
      "  },",
      "  onDelete: \"CASCADE\"",
      "},"
    ],
    "description": "migration foreign おでん"
  },
  "migration foreign おでん with ドセン": {
    "prefix": "migration-foregin-おでん-ドセン",
    "body": [
      "おでん＿たbLED_id: {",
      "  type: Sequelize.INTEGER,",
      "  allowNull: false,",
      "  references: {",
      "    model: \"おでん＿たbLEDs\",",
      "    key: \"id\"",
      "  },",
      "  onDelete: \"CASCADE\"",
      "},",
      "user_id: {",
      "  type: Sequelize.INTEGER,",
      "  allowNull: false,",
      "  references: {",
      "    model: \"users\",",
      "    key: \"id\"",
      "  },",
      "  onDelete: \"CASCADE\"",
      "},",
      "data_master_ドセン_id: {",
      "  type: Sequelize.INTEGER,",
      "  allowNull: false,",
      "  references: {",
      "    model: \"data_master_ドセンs\",",
      "    key: \"id\"",
      "  },",
      "  onDelete: \"CASCADE\"",
      "},"
    ],
    "description": "migration foreign おでん with ドセン"
  }
}